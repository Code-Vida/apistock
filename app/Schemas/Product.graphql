type Product {
  id: ID
  slug: String
  brand: String
  model: String
  imageUrl: String
  variants: [ProductVariant]  
  value: Float
  purchaseValue: Float
  lowStockAcknowledgedAt: String
}

type ProductVariant {
  colorSlug: String
  colorLabel: String
  hex1: String
  hex2: String
  items: [ProductItem]  
}

type ProductItem {
  number: Int
  value: Float
  purchaseValue: Float
  purchaseDate: Date
  amount: Int
  sales: Int
  barCode: String
}

input ProductInput {
  id: ID
  barCode: String
  brand: String
  model: String
  color: String
  number: Int
  purchaseDate: Date
  amount: Int
  lowStockThreshold: Int
  limit: Int
}

type Total {
  totalSalesSum: Float
  totalSum: Float
}

type ProductResponse {
  nodes: [Product]
  pagination: Pagination
  total: Total
}

input ProductInputNew {
  id: ID
  brand: String
  model: String
  value: Float
  purchaseValue: Float
  variants: [InputProductVariant]
}

input InputProductVariant{
  colorSlug: String
  colorLabel: String
  hex1: String
  hex2: String
  items: [InputProductItem]  
}

input InputProductItem {
  number: Int
  value: Float
  purchaseValue: Float
  purchaseDate: Date
  amount: Int
  sales: Int
  barCode: String
}

input ProductSearchInput {
  text: String
  barCode: String
  limit: Int
}

type StockEntryResult {
  updatedProductsCount: Int!
  notFoundEans: [String!]!
}


input ReturnItemInput {
  productId: ID!
  colorSlug: String!
  number: Int!
  quantity: Int!
  priceAtTimeOfSale: Float!
}

# Input principal para a mutação de criar a devolução
input CreateReturnInput {
  originalSaleId: ID!
  items: [ReturnItemInput!]!
  totalRefundAmount: Float!
  refundMethod: String! # Ex: "Dinheiro", "Crédito na Loja"
  reason: String # Opcional
}
