scalar Date

type Query {
  version: String
  getAll: [UserResponse]

  #products
  getProduct(input: ProductInput, pagination: PaginationInput): ProductResponse
  searchProducts(input: ProductSearchInput): [Product]
  #audiences(pagination: PaginationInput): AudiencesResponse @auth(requires: [USER])

  #report
  salesReport(input: Date): SalesReportResponse
  stockReport(input: ID): ProductResponse
  topSellingProducts(startDate: String! endDate: String! sortBy: String limit: Int): [TopSellingProduct]
  getProfitabilityReport(startDate: String!, endDate: String!): ProfitabilityReport
  getDailyCashClosingReport(date: String!): [PaymentMethodSummary]
  getInventoryReport: InventoryReport
  
  #dashboard
  dashboardSummary(date: String): DashboardSummary
  lowStockProducts(limit: Int, threshold: Int): [LowStockProduct]

  #sales
  getSales(startDate: String, endDate: String, limit: Int, offset: Int): [Sale]

  #cash
  getActiveCashSession: CashSession
  getActiveCashSessionSummary: ActiveCashSessionSummary

  #customers
  getCustomerById(id: ID!): Customer
  searchCustomers(searchText: String!): [Customer]
  getCustomerDetails(id: ID!): CustomerDetails
  getCustomerMarketingReport(input: CustomerMarketingInput!): [Customer]

}

type Mutation {
  hello: String

  #user
  # login(input: LoginInput!): UserResponse
  createUser(input: UserInput!): UserResponse

  #products
  createProduct(input: ProductInputNew): Boolean
  sales(input: ID): Product
  updateProduct(input: ProductInputNew): Boolean
  acknowledgeLowStock(productId: ID!): Product
  processDunCode(dunCode: String!, quantityPerEan: Int!): StockEntryResult!

  #devolution
  devolution(input: ID): Boolean

  #sales
  createSale(input: CreateSaleInput!): Boolean # Pode retornar a Venda se preferir

  #cash
  openCashSession(openingBalance: Float!): CashSession!
  addCashMovement(input: CashMovementInput!): Boolean
  closeCashSession(input: CloseCashSessionInput!): CashSession


  #customers
  createCustomer(input: CustomerInput!): Customer
  updateCustomer(id: ID!, input: CustomerInput!): Customer
  


}
